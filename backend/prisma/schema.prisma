generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  username        String?    @unique
  email           String     @unique
  password        String?
  name            String?
  role            String     @default("user")
  isActivated     Boolean    @default(false)
  activationToken String?
  activationTime  DateTime?
  isTrial         Boolean    @default(false)
  subscriptionDurationMinutes Int?

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  logs            UserLog[]
  subscriptionProfile SubscriptionProfile?  // ‚¨ÖÔ∏è hanya satu aktif
  devices         Device[] // ‚¨ÖÔ∏è relasi ke device     
  sensor          Sensor[]            
}

model SubscriptionProfile {
  id           String   @id @default(cuid())
  plan         String
  price        Int
  companyName  String
  fullName     String
  city         String
  country      String
  email        String?
  createdAt    DateTime @default(now())

  userId       String?   @unique
  user         User?     @relation(fields: [userId], references: [id])

  payments     Payment[]
}

model Device {
  id        String   @id @default(cuid())
  prtgId    String?  // objid dari PRTG
  name      String
  type      String?
  host      String?   // üëà tambahin
  parentId  String?   // üëà tambahin
  status    Int? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi ke user
  userId String
  user   User @relation(fields: [userId], references: [id])

  sensors Sensor[]
}

model Sensor {
  id        String   @id @default(cuid())
  name      String
  type      String
  deviceId  String
  userId    String
  prtgId    String
  status    String
  lastValue String?
  message   String?
  createdAt DateTime @default(now())
  logs      SensorLog[]
  device    Device   @relation(fields: [deviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


model SensorLog {
  id        Int      @id @default(autoincrement())
  value     String?
  createdAt DateTime @default(now())

  sensorId  String
  sensor    Sensor @relation(fields: [sensorId], references: [id])
}

model UserLog {
  id        Int      @id @default(autoincrement())
  userId    String?
  username  String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  package   String
  price     Int
  status    String   @default("pending") // pending | paid | expired
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String?
  profile   SubscriptionProfile? @relation(fields: [profileId], references: [id])
}
